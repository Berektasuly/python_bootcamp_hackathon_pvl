import json
import os
# Файл для хранения статей
DB_FILE = "articles.json"
# Файл для логирования поисковых запросов
LOG_FILE = "search_history.log"
# Функция для загрузки статей из файла
# Возвращает словарь статей или пустой словарь, если файл не существует
def load_articles():
    # Проверяем, существует ли файл с базой данных
    # Если нет, возвращаем пустой словарь
    if not os.path.exists(DB_FILE):
        return {}
    # Пытаемся загрузить статьи из файла
    try:
        # Используем кодировку UTF-8 для поддержки русских символов
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
        # Если файл успешно прочитан, возвращаем словарь статей
    except (json.JSONDecodeError, IOError) as e:
        # Если произошла ошибка при чтении файла, выводим сообщение об ошибке
        print(f"Ошибка при чтении файла {DB_FILE}: {e}")
        return {}
# Функция для сохранения статей в файл
# Принимает словарь статей и сохраняет его в файл
def save_articles(articles):
    try:
        # Используем кодировку UTF-8 для поддержки русских символов
        # Сохраняем статьи в формате JSON с отступами для удобства чтения
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(articles, f, ensure_ascii=False, indent=4)
    # Если файл успешно сохранен, выводим сообщение об успешном сохранении
    except IOError as e:
        # Если произошла ошибка при записи в файл, выводим сообщение об ошибке
        print(f"Ошибка при сохранении файла {DB_FILE}: {e}")
# Функция для логирования поисковых запросов
# Записывает поисковый запрос в лог-файл
def log_search_query(query):
    try:
        # Записываем поисковый запрос в лог-файл
        # Используем кодировку UTF-8 для поддержки русских символов
        with open(LOG_FILE, 'a', encoding='utf-8') as f:
            # Записываем запрос в новую строку
            # Используем форматирование строки для удобства чтения
            # Форматирование строки используется для добавления даты и времени запроса
            f.write(query + '\n')
    # Если лог-файл успешно обновлен, ничего не возвращаем
    except IOError as e:
        # Если произошла ошибка при записи в лог-файл, выводим сообщение об ошибке
        print(f"Ошибка при записи в лог-файл {LOG_FILE}: {e}")