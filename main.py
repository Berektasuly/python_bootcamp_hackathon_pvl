from app.file_handler import load_articles, save_articles
from app.ui import run_app

def initialize_database():
    """
    Создает первоначальную базу данных, если она отсутствует.
    Эта функция будет вызвана только если articles.json не найден.
    """
    print("Файл 'articles.json' не найден. Создание новой базы с 15 статьями по умолчанию.")
    initial_articles = {
        "Python": {"description": "Язык программирования.", "content": "Python — это высокоуровневый язык программирования общего назначения..."},
        "JSON": {"description": "Формат обмена данными.", "content": "JSON (JavaScript Object Notation) — это текстовый формат обмена данными..."},
        "API": {"description": "Интерфейс программирования приложений.", "content": "API (Application Programming Interface) — это описание способов..."},
        "База данных": {"description": "Структурированный набор данных.", "content": "База данных — это организованная структура для хранения, изменения и обработки..."},
        "SQL": {"description": "Язык структурированных запросов.", "content": "SQL (Structured Query Language) используется для создания, изменения и управления данными..."},
        "HTTP": {"description": "Протокол передачи гипертекста.", "content": "HTTP (Hypertext Transfer Protocol) — это протокол прикладного уровня..."},
        "HTML": {"description": "Язык гипертекстовой разметки.", "content": "HTML (HyperText Markup Language) — это стандартизированный язык разметки документов..."},
        "CSS": {"description": "Каскадные таблицы стилей.", "content": "CSS (Cascading Style Sheets) используется для описания внешнего вида документа..."},
        "JavaScript": {"description": "Язык программирования для веб-страниц.", "content": "JavaScript — это мультипарадигменный язык программирования..."},
        "Git": {"description": "Система контроля версий.", "content": "Git — это распределённая система управления версиями..."},
        "Linux": {"description": "Семейство Unix-подобных операционных систем.", "content": "Linux — это ядро операционной системы..."},
        "Алгоритм": {"description": "Набор инструкций для выполнения задачи.", "content": "Алгоритм — это конечная совокупность точно заданных правил..."},
        "Структуры данных": {"description": "Способы организации данных.", "content": "Структуры данных — это программная единица, позволяющая хранить и обрабатывать..."},
        "Объектно-ориентированное программирование": {"description": "Парадигма программирования.", "content": "ООП — это методология программирования, основанная на представлении программы..."},
        "Функциональное программирование": {"description": "Парадигма программирования.", "content": "Функциональное программирование — это раздел дискретной математики и парадигма программирования..."}
    }
    save_articles(initial_articles)
    return initial_articles

def main():
    """Главная функция для запуска приложения."""
    # Пытаемся загрузить статьи из файла articles.json
    articles = load_articles()
    
    # Если файл не был найден или он пуст, articles будет пустым словарем.
    # В этом случае - и только в этом - мы создаем базу по умолчанию.
    if not articles:
        articles = initialize_database()
    
    # Запускаем основной цикл приложения с загруженными (или созданными) статьями
    run_app(articles)

# Эта строка гарантирует, что функция main() запустится только тогда,
# когда этот файл исполняется напрямую.
if __name__ == "__main__":
    main()